{"name":"xlsx2json","tagline":"让excel可以表达复杂json格式，导出json，然后存入mongo数据库。","body":"xlsx2json\r\n=========\r\n\r\n## 作用\r\n* 让excel表达复杂的json格式\r\n* 将excel转成json\r\n* 将json导入mongo数据库。\r\n\r\n## 为什么要做这个项目？\r\n开发游戏的时候，策划用的是excel，而我们的数据库是mongo。\r\n我们的工作流是策划写excel，导出json，然后导入mongo数据库。\r\n\r\n因为excel是二维的，无法表达mongo文档里面数组和subdocument等复杂结构。\r\n按excel结构来设计mongo，会使mongo受限并无法使用某些特性。\r\n\r\n有一个clojure项目 [excel-to-json ](https://github.com/mhaemmerle/excel-to-json) 可以完成这个功能。\r\n但是不懂clojure表示压力很大而且有些功能不符合我们的需求。\r\n\r\nso,就搞了这个项目。某些想法也是借鉴了[excel-to-json ](https://github.com/mhaemmerle/excel-to-json)，表示感谢。\r\n\r\n## 使用说明\r\n首次使用需要配置config.json\r\n\r\n```json\r\n{\r\n    \"xlsx\": {\r\n        \"head\": 2,//表头所在的行，第一行可以是注释，第二行是表头。\r\n        \"src\": \"./excel/**/[^~$]*.xlsx\", //xlsx文件 glob配置风格\r\n        \"dest\": \"./json\"    //导出的json存放的位置\r\n    },\r\n\r\n    \"mongoimport\": \".\\\\bin\\\\mongoimport.exe\",\r\n\r\n    \"db\": { //json要导入的数据库的配置，如果没有用户名密码，导入时候命令行加 --noauth\r\n        \"host\": \"127.0.0.1\",\r\n        \"database\": \"princess\",\r\n        \"user\": \"princess\",\r\n        \"port\": 27010,\r\n        \"pwd\": \"pwd\"\r\n    }\r\n}\r\n```\r\n\r\n注：node & mongoimport 命令用的是.\\bin下面的exe。node版本是0.10.26。mongoimport版本是2.6。\r\n\r\n\r\n* 查看帮助：执行`node index.js -h` 查看使用帮助；\r\n* excel导出json：双击`export.bat` 即可将 `./excel/*.xlsx` 文件导出到 `./json` 下。\r\n* json导入mongo：双击`import.bat`即可将./json下所有的json文件导入到数据库中。\r\ncollection的名字就是json文件的名字。\r\n或者自己手动导入：\r\n`mongoimport -h 127.0.0.1 --port 27017 -u username -p password -d db_name -c collection_name xxx.json --jsonArray`\r\n* 还支持命令行传参导入导出特定excel，具体使用 node `index.js --help` 查看。\r\n\r\n\r\n#### 示例1 test.xlsx\r\n![test.xlsx](http://img3.douban.com/view/photo/photo/public/p2180848214.jpg)\r\n\r\n输出如下：\r\n\r\n```json\r\n[{\r\n    \"id\": 123,\r\n    \"desc\": \"description\",\r\n    \"flag\": true,\r\n    \"otherid\": [1, 2],\r\n    \"words\": [\"哈哈\", \"呵呵\"],\r\n    \"map\": [true, true],\r\n    \"data\": {\r\n        \"a\": 123,\r\n        \"b\": 45\r\n    },\r\n    \"hero\": [\r\n      {\"id\": 2,\"level\": 30}, \r\n      {\"id\": 3,\"level\": 80}\r\n    ]\r\n}, {\r\n    \"id\": 456,\r\n    \"desc\": \"描述\",\r\n    \"flag\": false,\r\n    \"otherid\": [3, 5, 8],\r\n    \"words\": [\"shit\", \"my god\"],\r\n    \"map\": [false, true],\r\n    \"data\": {\r\n        \"a\": 11,\r\n        \"b\": 22\r\n    },\r\n    \"hero\": [\r\n      {\"id\": 9, \"level\": 38 }, \r\n      {\"id\": 17,\"level\": 100}\r\n    ]\r\n}]\r\n```\r\n\r\n## 支持以下数据类型\r\n* number 数字类型\r\n* boolean  布尔\r\n* string 字符串\r\n* object 对象  // 不支持对象内有数组以及对象嵌套对象，防止表格过度复杂。\r\n* number-array  数字数组\r\n* boolean-array  布尔数组\r\n* string-array  字符串数组\r\n* object-array 对象数组\r\n\r\n## 表头规则\r\n* 字段是基本数据类型(string,number,boolean)时候，不需要特殊设置。\r\n* 字段是基本类型数组：此列表头的命名形式 `列名#[]` 。\r\n* 字段是对象：此列表头的命名形式 `列名#{}` 。\r\n* 字段是对象数组：此列表头的命名形式`列名#[{}]` 。\r\n\r\n## 数据规则\r\n* 关键符号都是半角符号。\r\n* 数组使用逗号`,`分割。\r\n* 对象属性使用分号`;`分割。\r\n\r\n## 原理说明\r\n* 依赖 `node-xlsx` 这个npm项目解析xlsx文件。\r\n* 其实xlsx就是个zip文件，解压出来都是xml。\r\n  有一个xml存的string，有相应个xml存的sheet。\r\n  通过解析xml解析出excel数据(json格式)，这个就是`node-xlsx` 做的工作。\r\n* 本项目只需利用 `node-xlsx` 解析xlsx文件，然后拼装自定的json数据。\r\n\r\n## 补充\r\n* 实验环境：win7_x64 + nodejs_v0.10.25\r\n* 项目地址 [xlsx2json master](https://github.com/koalaylj/xlsx2json)\r\n* 如有问题可以到QQ群内讨论：223460081\r\n* 项目中的某些工具函数测试用例请参见我的gist js:validate & js:convert。","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}